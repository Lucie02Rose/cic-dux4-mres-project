#!/bin/bash
### parameters for the lsf job ###
#BSUB -n 16
#BSUB -M 100000
#BSUB -R 'span[hosts=1] select[mem>100000] rusage[mem=100000]'
#BSUB -q normal
#BSUB -J dux4-pop
#BSUB -G team274
#BSUB -o /lustre/scratch126/casm/team274sb/lr26/outputs/%J-single.o
#BSUB -e /lustre/scratch126/casm/team274sb/lr26/errors/%J-single.e

### failure management ###
set -euo pipefail

### activate bwa mem2 conda environmant ###
source /software/cellgen/team274/lr26/miniforge3/bin/activate
conda activate bwa-mem2

### parameters ###
threads=16
reference="/lustre/scratch126/casm/team274sb/lr26/T2T/chm13v2.0.fa"
roi_region="chr4:193541548-193563474" ### region of interest ###
roi_fasta="chr4_dux_augustus.fasta" ### generated by extracting coordinates 193,541,548 - 193,563,474 from the chm13v2.0.fa ###
output_dir="/lustre/scratch126/casm/team274sb/lr26/population_dux"
### is changed depending on sample, all samples have been downloaded in this fashion - sed only works for this setup ###
input_bam="/lustre/scratch126/casm/team274sb/lr26/population_dux/PD54859b/PD54859b.sample.dupmarked.bam"

### prepare the roi fasta file from reference ###
sample=$(basename "$input_bam" .bam)
cd "$output_dir" 
if [[ ! -f "$roi_fasta" ]]; then
    echo "Extracting ROI from reference"
    samtools faidx -@ "$threads" "$reference" "$roi_region" > "$roi_fasta"
fi

### processing the sample - printing ###
echo "Processing sample: $sample"
### using samtools for extraction on all files ###
samtools fastq -@ "$threads" -1 "${sample}_R1.fq" -2 "${sample}_R2.fq" "$input_bam"
### using minimap2 to extract the reads of interests that align from the fastq files and store in a paf file ###
minimap2 -t "$threads" -x sr "$roi_fasta" "${sample}_R1.fq" "${sample}_R2.fq" > "${sample}_roi.paf"
### filtering step for extracting reads which align at least 0.25 percent to the region of interest ###
awk '$10/$2 >= 0.25 {print $1}' "${sample}_roi.paf" | sort | uniq > "${sample}_passing_ids.txt"
if [[ ! -s "${sample}_passing_ids.txt" ]]; then
    echo "No reads passed for $sample â€” skipping."
    exit 0
fi
### subsampling the input bam for reads that passed filtering, sort and fix mates ###
### generate a subsampled fastq of the reads of interest ###
samtools view -@ "$threads" -N "${sample}_passing_ids.txt" -b "$input_bam" > "${sample}_temp.bam"
samtools sort -@ "$threads" -n "${sample}_temp.bam" -o "${sample}_temp.sorted.bam"
samtools fixmate -@ "$threads" -m "${sample}_temp.sorted.bam" "${sample}_fixmate.bam"
samtools view -@ "$threads" -bf 0x2 "${sample}_fixmate.bam" > "${sample}_subsampled.bam"  
samtools fastq -@ "$threads" -1 "${sample}_sub_R1.fq" -2 "${sample}_sub_R2.fq" "${sample}_subsampled.bam"

### align the subsampled fastqs back to the reference, view and sort and index the ouput ###
bwa-mem2 mem -t "$threads" "$reference" "${sample}_sub_R1.fq" "${sample}_sub_R2.fq" | \
    samtools view -@ "$threads" -Sb - | \
    samtools sort -@ "$threads" -o "${sample}_t2t.sorted.bam"
samtools index -@ "$threads" "${sample}_t2t.sorted.bam"

### clean all files that are not needed ###
rm -f "${sample}_R1.fq" "${sample}_R2.fq" "${sample}_roi.paf" "${sample}_passing_ids.txt"
rm -f "${sample}_temp.bam" "${sample}_temp.sorted.bam" "${sample}_fixmate.bam" "${sample}_subsampled.bam"
rm -f "${sample}_sub_R1.fq" "${sample}_sub_R2.fq"
